name: CI — Lint & Tests
run-name: PR • ${{ github.event.pull_request.title || github.ref_name }}

on:
  push:
    branches: [ main ]  
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test-windows:
    name: Windows • Lint + Pester (${{ matrix.label }})
    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        include:
          - shell: pwsh
            label: 'PowerShell 7'
            modules_dir: 'PowerShell'
          - shell: powershell
            label: 'Windows PowerShell 5.1'
            modules_dir: 'WindowsPowerShell'

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: ~\Documents\${{ matrix.modules_dir }}\Modules
          key: pwsh-mods-${{ runner.os }}-${{ matrix.shell }}-pester-5.7.1-pssa-1.22.0
          restore-keys: |
            pwsh-mods-${{ runner.os }}-${{ matrix.shell }}-

      - name: Lint (PSScriptAnalyzer)
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force
          $settings = '.pssa/PSScriptAnalyzerSettings.psd1'
          $findings = Invoke-ScriptAnalyzer -Path . -Settings $settings -Recurse -Severity Error
          $findings
          if ($findings | Where-Object Severity -eq 'Error') { throw "PSScriptAnalyzer errors detected." }

      - name: Install Pester 5.x
        run: |
          Install-Module Pester -MinimumVersion 5.7.1 -Scope CurrentUser -Force
          Import-Module Pester -MinimumVersion 5.7.1

      - name: Run Pester (JUnit XML)
        run: |
          New-Item -ItemType Directory -Force -Path 'test-results' | Out-Null
          $config = New-PesterConfiguration
          $config.Run.Path = 'tests'
          $config.Run.PassThru = $true
          $config.Run.Exit = $true
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputFormat = 'JUnitXml'
          $config.TestResult.OutputPath = "test-results/pester-${{ matrix.shell }}.xml"
          Invoke-Pester -Configuration $config

      - name: Upload raw test results (${{ matrix.label }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Pester-Results-${{ matrix.shell }}
          path: test-results/pester-${{ matrix.shell }}.xml
          if-no-files-found: error
          retention-days: 30

      - name: Publish test report (${{ matrix.label }})
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: Pester (${{ matrix.label }})
          path: test-results/pester-${{ matrix.shell }}.xml
          reporter: java-junit
          fail-on-empty: true
          fail-on-error: false
